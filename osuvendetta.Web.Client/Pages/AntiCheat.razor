@page "/anticheat"
@using osuVendetta.Core.AntiCheat
@using osuVendetta.Core.AntiCheat.Data
@using osuVendetta.Web.Client.AntiCheat
@using OsuParsers.Decoders
@using OsuParsers.Enums
@using OsuParsers.Enums.Replays
@using OsuParsers.Replays
@using OsuParsers.Replays.Objects
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@inject IAntiCheatService AntiCheatService
@inject ISnackbar Snackbar

<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<PageTitle>Anticheat</PageTitle>

<MudStack Style="width: 100%">
    <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                   OnFilesChanged="OnInputFileChanged"
                   AppendMultipleFiles
                   Hidden="@false"
                   InputClass="absolute mud-width-full mud-height-full overflow-hidden z-10"
                   InputStyle="opacity:0"
                   tabindex="-1"
                   @ondrop="@ClearUploadDragClass"
                   @ondragenter="@SetUploadDragClass"
                   @ondragleave="@ClearUploadDragClass"
                   @ondragend="@ClearUploadDragClass">
        <ActivatorContent>
            <MudPaper Height="300px"
                      Outlined="true"
                      Class="@DragClass">
                <MudText Typo="Typo.h6">
                    Drag and drop files here or click
                </MudText>
                @foreach (string file in FileNames)
                {
                    <MudChip T="string"
                             Color="Color.Dark"
                             Text="@file"
                             tabindex="-1" />
                }
            </MudPaper>
        </ActivatorContent>
    </MudFileUpload>
    <MudToolBar Gutters="@false"
                Class="relative d-flex justify-end gap-4">
        <MudButton Color="Color.Primary"
                   OnClick="@OpenFilePickerAsync"
                   Variant="Variant.Filled">
            Open file picker
        </MudButton>
        <MudButton Color="Color.Primary"
                   Disabled="@(!FileNames.Any())"
                   OnClick="@UploadAsync"
                   Variant="Variant.Filled">
            Upload
        </MudButton>
        <MudButton Color="Color.Error"
                   Disabled="@(!FileNames.Any())"
                   OnClick="@ClearUploadAsync"
                   Variant="Variant.Filled">
            Clear
        </MudButton>
    </MudToolBar>
</MudStack>

<script src="https://cdn.jsdelivr.net/npm/onnxruntime-web/dist/ort.min.js"></script>
<script src="/onnx/onnxHelper.js"></script>

@code {
    const string DEFAULT_DRAG_CLASS = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    const string ONNX_JS_INTEROP_FUNC = "onnxInterop.run";
    const string ONNX_MODEL_PATH = @"/api/File?file=56x4Model.onnx";

    public MudFileUpload<IReadOnlyList<IBrowserFile>>? FileUpload;
    public List<string> FileNames = new List<string>();
    public string DragClass = DEFAULT_DRAG_CLASS;

    // for some reason FileUpload.Files doesn't store any files so we need to manually do this
    List<IBrowserFile> _filesToUpload = new List<IBrowserFile>();


    public async Task ClearUploadAsync()
    {
        if (FileUpload is not null)
        {
            await FileUpload.ClearAsync();
            FileNames.Clear();
            _filesToUpload.Clear();
        }

        ClearUploadDragClass();
    }

    public async Task OpenFilePickerAsync()
    {
        if (FileUpload is not null)
            await FileUpload.OpenFilePickerAsync();
    }

    public void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        if (FileUpload is null)
            return;

        ClearUploadDragClass();

        var files = e.GetMultipleFiles();
        foreach (var file in files)
        {
            FileNames.Add(file.Name);
            _filesToUpload.Add(file);
        }
    }

    public async Task UploadAsync()
    {
        if (_filesToUpload.Count == 0)
            return;

        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;

        for (int i = 0; i < _filesToUpload.Count; i++)
        {
            IBrowserFile file = _filesToUpload[i];

            using Stream fileStream = file.OpenReadStream();
            using MemoryStream replayStream = new MemoryStream();
            await fileStream.CopyToAsync(replayStream, (int)file.Size);

            replayStream.Seek(i, SeekOrigin.Begin);

            AntiCheatResult? result = await AntiCheatService.ProcessReplayAsync(replayStream,
                new ModelProviderArgs(ONNX_MODEL_PATH, ONNX_JS_INTEROP_FUNC));

            if (result is null)
            {
                Snackbar.Add($"Invalid replay: {file.Name}");
                continue;
            }

            Snackbar.Add($"Replay {file.Name} result: {result.Type.ToString()}");
        }

        await ClearUploadAsync();
    }

    void SetUploadDragClass()
    {
        DragClass = $"{DEFAULT_DRAG_CLASS} mud-border-primary";
    }

    void ClearUploadDragClass()
    {
        DragClass = DEFAULT_DRAG_CLASS;
    }
}
