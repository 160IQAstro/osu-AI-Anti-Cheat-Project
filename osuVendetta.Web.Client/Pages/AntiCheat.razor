@page "/anticheat"
@using System.Diagnostics
@using osuVendetta.Core.AntiCheat
@using osuVendetta.Core.AntiCheat.Data
@using osuVendetta.Web.Client.AntiCheat
@using OsuParsers.Decoders
@using OsuParsers.Enums
@using OsuParsers.Enums.Replays
@using OsuParsers.Replays
@using OsuParsers.Replays.Objects
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@inject IAntiCheatService AntiCheatService
@inject ISnackbar Snackbar

<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<PageTitle>Anticheat</PageTitle>

<MudAlert Severity="Severity.Warning">
    • This model is in its <b>ALPHA</b> phase with current accuracy around 93%. <br />
    • Do <b>NOT</b> rely solely on the model's output; double-check findings independently. <br />
</MudAlert>

<MudStack Style="width: 100%">
    <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                   @ref="FileUpload"
                   OnFilesChanged="OnInputFileChanged"
                   AppendMultipleFiles
                   Hidden="@false"
                   InputClass="absolute mud-width-full mud-height-full overflow-hidden z-10"
                   InputStyle="opacity:0"
                   tabindex="-1"
                   @ondrop="@ClearUploadDragClass"
                   @ondragenter="@SetUploadDragClass"
                   @ondragleave="@ClearUploadDragClass"
                   @ondragend="@ClearUploadDragClass">
        <ActivatorContent>
            <MudPaper Height="300px"
                      Outlined="true"
                      Class="@DragClass">
                <MudText Typo="Typo.h6">
                    Drag and drop files here or click
                </MudText>
                @foreach (string file in FileNames)
                {
                    <MudChip T="string"
                                 Color="Color.Dark"
                                 Text="@file"
                                 tabindex="-1" />
                             <br />
                }
            </MudPaper>
        </ActivatorContent>
    </MudFileUpload>
    <MudToolBar Gutters="@false"
                Class="relative d-flex justify-end gap-4">
        <MudButton Color="Color.Primary"
                   Disabled="@(!FileNames.Any())"
                   OnClick="@UploadAsync"
                   Variant="Variant.Filled">
            Upload
        </MudButton>
        <MudButton Color="Color.Error"
                   Disabled="@(!FileNames.Any())"
                   OnClick="@ClearUploadAsync"
                   Variant="Variant.Filled">
            Clear
        </MudButton>
    </MudToolBar>
</MudStack>
@* <div>
  {replayItems.map((item, index) => (
    <div key={index}>
      <div>
        <h3>{item.player}</h3>
        <FileText />
      </div>
      <div>
        <p>{item.song}</p>
        <p>
          [{item.difficulty}] - {item.date}
        </p>
        <div>
          <span>Status:</span>
          <span>
            {item.status}
          </span>
        </div>
        <div>
          <div>
            <span>Confidence</span>
            <span>{item.confidence}%</span>
          </div>
          <div>
            <div 
              style={{width: `${item.confidence}%`}}
            ></div>
          </div>
        </div>
      </div>
    </div>
  ))}
</div> *@
<MudGrid Spacing="6">
    @foreach (ResultDisplay result in AntiCheatResults)
    {
        <MudItem>
            <MudPaper Height="180px" Width="420px">
                <MudText Style="color:cyan">@result.Player</MudText>
                <MudDivider Style="padding-bottom:3px"/>
                <MudText Style="color:cyan">@result.FileName</MudText>
                <MudGrid>
                    <MudItem Style="align-content:center">
                        <MudText>Status: </MudText>
                    </MudItem>
                    <MudItem>
                        @if (result.Result.Equals("Normal"))
                        {
                            <MudChip T="string" Color="Color.Success">@result.Result</MudChip>
                        }
                        else
                        {
                            <MudChip T="string" Color="Color.Error">@result.Result</MudChip>
                        }
                    </MudItem>
                </MudGrid>
                <MudText>@result.NormalProbability</MudText>
                <MudText>@result.RelaxProbability</MudText>
            </MudPaper>
        </MudItem>
    }
</MudGrid>

<script src="https://cdn.jsdelivr.net/npm/onnxruntime-web/dist/ort.min.js"></script>
<script src="/onnx/onnxHelper.js"></script>

@code {

    public record class ResultDisplay(string Player, string Result, string FileName, string NormalProbability, string RelaxProbability);

    const string DEFAULT_DRAG_CLASS = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    const string ONNX_JS_INTEROP_FUNC = "onnxInterop.run";
    const string ONNX_MODEL_PATH = @"/api/File";

    // FileUpload is set in html
    public MudFileUpload<IReadOnlyList<IBrowserFile>> FileUpload;
    public List<string> FileNames = new List<string>();
    public string DragClass = DEFAULT_DRAG_CLASS;

    public readonly List<ResultDisplay> AntiCheatResults = new List<ResultDisplay>();

    List<IBrowserFile> _filesToUpload = new List<IBrowserFile>();

    public async Task ClearUploadAsync()
    {
        ClearUploadDragClass();

        await FileUpload.ClearAsync();

        FileNames.Clear();
        _filesToUpload.Clear();
    }

    public async Task OpenFilePickerAsync()
    {
        await FileUpload.OpenFilePickerAsync();
    }

    public void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearUploadDragClass();

        _filesToUpload.Clear();
        FileNames.Clear();

        IReadOnlyList<IBrowserFile> files = e.GetMultipleFiles();
        foreach (IBrowserFile file in files)
        {
            _filesToUpload.Add(file);
            FileNames.Add(file.Name);
        }
    }

    public async Task UploadAsync()
    {
        AntiCheatResults.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Configuration.RequireInteraction = true;

        for (int i = 0; i < _filesToUpload.Count; i++)
        {
            IBrowserFile file = _filesToUpload[i];

            using Stream fileStream = file.OpenReadStream();
            using MemoryStream replayStream = new MemoryStream();
            await fileStream.CopyToAsync(replayStream, (int)file.Size);

            replayStream.Seek(0, SeekOrigin.Begin);

            try
            {
                AntiCheatResult? result = await AntiCheatService.ProcessReplayAsync(replayStream,
                new ModelProviderArgs(ONNX_MODEL_PATH, ONNX_JS_INTEROP_FUNC));

                if (result is null)
                {
                    Snackbar.Add($"Invalid replay: {file.Name}");
                    return;
                    // continue;
                }

                string normalProbability = string.Empty;
                string relaxProbability = string.Empty;

                if (!string.IsNullOrEmpty(result.Message) && result.Type != AntiCheatResultType.Invalid)
                {
                    string[] split = result.Message.Split('/');
                    normalProbability = split[0];
                    relaxProbability = split[1];
                }

                ResultDisplay resultDisplay = new ResultDisplay(
                result.Metadata?.Player ?? "Unkown Player",
                result.Type.ToString(),
                file.Name,
                normalProbability,
                relaxProbability);

                AntiCheatResults.Add(resultDisplay);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"An exception occured:\n{ex}");
            }
        }

        await ClearUploadAsync();
    }

    void SetUploadDragClass()
    {
        DragClass = $"{DEFAULT_DRAG_CLASS} mud-border-primary";
    }

    void ClearUploadDragClass()
    {
        DragClass = DEFAULT_DRAG_CLASS;
    }
}
